{"version":3,"sources":["./src/PatientApp/PatientApp.PatientAddComponent.ts","./src/PatientApp/PatientApp.PatientAdd.html","./src/PatientApp/PatientApp.Module.ts","./src/PatientApp/PatientApp.PatientAddModel.ts","./src/PatientApp/PatientApp.Routing.ts"],"names":[],"mappings":"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","file":"PatientApp-PatientApp-Module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {Patient} from './PatientApp.PatientAddModel';\nimport { HttpClient } from '@angular/common/http';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  templateUrl: './PatientApp.PatientAdd.html',\n  styleUrls: ['./PatientApp.PatientAdd.css']\n})\nexport class PatientAppComponent implements OnInit{\n  loginForm: FormGroup;\n  \n  ngOnInit(): void {\n    this.initForm();\n  }\n  \n  title = 'HospitalClient';\n  Patientobj:Patient = new Patient();\n  Patientobjs:Array<Patient> = new Array<Patient>();\n  constructor(public httpobj:HttpClient,private fb: FormBuilder){\n  }\n  initForm(): void {\n    this.loginForm = this.fb.group({\n      phone: ['', [Validators.required,\n      Validators.pattern('^[0-9]{10}$')]],\n      name: ['', Validators.required],\n      address: ['', Validators.required]\n})};\nisValidInput(fieldName): boolean {\n  return this.loginForm.controls[fieldName].invalid &&\n    (this.loginForm.controls[fieldName].dirty || this.loginForm.controls[fieldName].touched);\n}\n   \n  \n  AddInMemory(){\n    this.Patientobjs.push(this.Patientobj); // adding in the collection\n    this.Patientobj = new Patient(); //clearing the fields.\n  }\n  Add(){\n    //send to webapi!\nvar observable = this.httpobj.post(\"https://localhost:5001/api/PatientApi\",this.Patientobjs);\nobservable.subscribe(res => this.Success(res),res=> this.Error(res));\n  }\n  Success(res){\nthis.Patientobjs =res;\n  }\n  Error(res){\n\n  }\n \n}\n ","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-md-5\">  \n      <form [formGroup]=\"loginForm\">\n        <div class=\"form-group\">\n          <label for=\"name\">Name</label>\n          <input type=\"text\"\n                 class=\"form-control\"\n                 id=\"pname\"\n                 name=\"name\"\n                 [(ngModel)]=\"Patientobj.name\"\n                 formControlName=\"name\">\n                </div>\n                <div *ngIf=\"isValidInput('name')\"\n                  class=\"alert alert-danger\">\n                  <div *ngIf=\"loginForm.controls['name'].errors.required\">\n                    Name is required.\n                  </div>\n                </div>\n        \n        <div class=\"form-group\">\n          <label for=\"phone\">Phone</label>\n          <input type=\"text\"\n                 class=\"form-control\"\n                 id=\"phone\"\n                 name=\"Phone\"\n                 [(ngModel)]=\"Patientobj.phone\"\n                 formControlName =\"phone\">\n        </div>\n        <div *ngIf=\"isValidInput('phone')\"\n        class=\"alert alert-danger\">\n        <div *ngIf=\"loginForm.controls['phone'].errors.required\">\n          Phone is required.\n        </div>\n        <div *ngIf=\"loginForm.controls['phone'].errors.pattern\">\n          Must be a valid PhoneNumber format.\n        </div>\n      </div>\n\n        <div class=\"form-group\">\n          <label for=\"address\">Address</label>\n          <input type=\"text\"\n                 class=\"form-control\"\n                 id=\"address\"\n                 name=\"address\"\n                 [(ngModel)]=\"Patientobj.address\"\n                 formControlName =\"address\">\n        </div>\n        <div *ngIf=\"isValidInput('address')\"\n        class=\"alert alert-danger\">\n        <div *ngIf=\"loginForm.controls['address'].errors.required\">\n          Address is required.\n        </div>\n      </div>\n\n        <button\n        [disabled]=\"!loginForm.valid\"\n        type=\"button\" \n        value=\"Add In Memory\" \n        (click)=\"AddInMemory()\" \n        id=\"aim\"\n        class=\"btn btn-warning\"\n        >Add in Memory</button>\n\n        <button\n        [disabled]=\"!loginForm.valid\"\n        type=\"button\" \n        value=\"Send to WEB API\"\n          (click)=\"Add()\" \n          id=\"add\"\n        class=\"btn btn-warning\"\n        >Send to WEB API</button>\n\n      </form>\n    </div>\n  </div>\n</div>\n\n<style>\n  table, th, td {\n    border: 1px solid black;\n  }\n  \n  th, td {\n    padding: 10px;\n  }\n  </style>\n<table id=\"table\">\n  <tr>\n    <td>name</td>\n    <td>Phone</td>\n    <td>address</td>\n  </tr>\n  <tr *ngFor=\"let tempat of Patientobjs\" id=\"tablefor\">\n    <td>{{tempat.name}}</td>\n    <td>{{tempat.phone}}</td>\n    <td>{{tempat.address}}</td>\n  </tr>\n</table>\n<br />\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router'\nimport { PatientAppComponent } from './PatientApp.PatientAddComponent';\nimport {PatientRoutes} from './PatientApp.Routing';\nimport {CommonModule} from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport {JwtInterceptor} from '../Security/Security.Interceptor';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    PatientAppComponent\n  ],\n  imports: [\n    CommonModule,ReactiveFormsModule,FormsModule,RouterModule.forChild(PatientRoutes)\n  ],\n  providers: [{provide: HTTP_INTERCEPTORS, useClass:JwtInterceptor,multi:true}],\n  bootstrap: [PatientAppComponent]\n})\nexport class PatientModule { \n  \n}\n","export class Patient \n{\n    name:string; \n    phone:string;\n    address:string;\n\n    \n}\n","import {PatientAppComponent} from './PatientApp.PatientAddComponent'\n\nexport const PatientRoutes=[\n   \n    {path: 'Add',component: PatientAppComponent},\n]\n\n  \n  "],"sourceRoot":"webpack:///"}